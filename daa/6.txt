#include <bits/stdc++.h>
using namespace std;

int am[100][100], vis[100], p[100], n;

void dfs(int start) {
    fill(vis, vis + n, 0); fill(p, p + n, -1);
    stack<int> s; s.push(start); vis[start] = 1;
    cout << "DFS: " << start << " ";
    
    while (!s.empty()) {
        int v = s.top(), found = 0;
        for (int i = 0; i < n && !found; i++) {
            if (am[v][i] && !vis[i]) {
                vis[i] = 1; p[i] = v; s.push(i);
                cout << i << " "; found = 1;
            }
        }
        if (!found) s.pop();
    }
    
    cout << "\nSpanning Tree:\n";
    for (int i = 1; i < n; i++)
        if (p[i] != -1) cout << p[i] << " -> " << i << "\n";
}

int main() {
    cout << "Enter vertices: "; cin >> n;
    cout << "Enter matrix:\n";
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++) cin >> am[i][j];
    
    clock_t t = clock();
    dfs(0);
    cout << "Time: " << double(clock() - t) / CLOCKS_PER_SEC * 1e9 << " ns\n";
}