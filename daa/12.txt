#include <iostream>
#include <climits>
#include <time.h>
using namespace std;
#define V 5
const char *homes[V] = {"A", "B", "C", "D", "E"};

int minKey(int key[], bool mstSet[])
{
    int m = INT_MAX, idx = -1;
    for (int v = 0; v < V; v++)
        if (!mstSet[v] && key[v] < m)
            m = key[v], idx = v;
    return idx;
}

void primMST(int g[V][V])
{
    int parent[V], key[V];
    bool mstSet[V];
    for (int i = 0; i < V; i++)
        key[i] = INT_MAX, mstSet[i] = 0;
    key[0] = 0, parent[0] = -1;

    for (int c = 0; c < V - 1; c++)
    {
        int u = minKey(key, mstSet);
        mstSet[u] = 1;
        for (int v = 0; v < V; v++)
            if (g[u][v] && !mstSet[v] && g[u][v] < key[v])
                parent[v] = u, key[v] = g[u][v];
    }

    int total = 0;
    cout << "Edge\tDist\n";
    for (int i = 1; i < V; i++)
        cout << homes[parent[i]] << "-" << homes[i] << "\t" << g[i][parent[i]] << "\n", total += g[i][parent[i]];
    cout << "Total pipe length = " << total << " meters\n";
}

int main()
{
    int g[V][V] = {
        {0, 5, 0, 4, 0},
        {5, 0, 7, 9, 0},
        {0, 7, 0, 9, 5},
        {4, 9, 9, 0, 8},
        {0, 0, 5, 8, 0}};
    clock_t start = clock();

    primMST(g);
    clock_t end = clock();
    cout << "Time: " << double(end - start) / CLOCKS_PER_SEC * 1e9 << " ns\n";

    return 0;
}